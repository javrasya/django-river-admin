// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`StateInput.vue should filter out those that doesnt match the search 1`] = `
<v-autocomplete-stub
  allowoverflow="true"
  appendicon="$dropdown"
  backgroundcolor=""
  clearable="true"
  clearicon="$clear"
  errorcount="1"
  errormessages=""
  filter="function _default(item, queryText, itemText) {
        return itemText.toLocaleLowerCase().indexOf(queryText.toLocaleLowerCase()) > -1;
      }"
  hideselected="true"
  itemcolor="primary"
  itemdisabled="disabled"
  items=""
  itemtext="final_label"
  itemvalue="value"
  label="Test state"
  loaderheight="2"
  loading="true"
  menuprops="[object Object]"
  messages=""
  nodatatext="$vuetify.noDataText"
  returnobject="true"
  rules=""
  searchinput="Op"
  successmessages=""
  type="text"
  valuecomparator="function deepEqual(a, b) {
  if (a === b) return true;

  if (a instanceof Date && b instanceof Date) {
    // If the values are Date, they were convert to timestamp with getTime and compare it
    if (a.getTime() !== b.getTime()) return false;
  }

  if (a !== Object(a) || b !== Object(b)) {
    // If the values aren't objects, they were already checked for equality
    return false;
  }

  var props = Object.keys(a);

  if (props.length !== Object.keys(b).length) {
    // Different number of props, don't bother to check
    return false;
  }

  return props.every(function (p) {
    return deepEqual(a[p], b[p]);
  });
}"
/>
`;

exports[`StateInput.vue should not fetch states unless the typing starts 1`] = `<!---->`;

exports[`StateInput.vue should not show creating state option when user is not authorized 1`] = `
<v-autocomplete-stub
  allowoverflow="true"
  appendicon="$dropdown"
  backgroundcolor=""
  clearable="true"
  clearicon="$clear"
  errorcount="1"
  errormessages=""
  filter="function _default(item, queryText, itemText) {
        return itemText.toLocaleLowerCase().indexOf(queryText.toLocaleLowerCase()) > -1;
      }"
  hideselected="true"
  itemcolor="primary"
  itemdisabled="disabled"
  items=""
  itemtext="final_label"
  itemvalue="value"
  label="Test state"
  loaderheight="2"
  loading="true"
  menuprops="[object Object]"
  messages=""
  nodatatext="$vuetify.noDataText"
  returnobject="true"
  rules=""
  searchinput="sta"
  successmessages=""
  type="text"
  valuecomparator="function deepEqual(a, b) {
  if (a === b) return true;

  if (a instanceof Date && b instanceof Date) {
    // If the values are Date, they were convert to timestamp with getTime and compare it
    if (a.getTime() !== b.getTime()) return false;
  }

  if (a !== Object(a) || b !== Object(b)) {
    // If the values aren't objects, they were already checked for equality
    return false;
  }

  var props = Object.keys(a);

  if (props.length !== Object.keys(b).length) {
    // Different number of props, don't bother to check
    return false;
  }

  return props.every(function (p) {
    return deepEqual(a[p], b[p]);
  });
}"
/>
`;

exports[`StateInput.vue should show creating state option when user is authorized 1`] = `
<v-autocomplete-stub
  allowoverflow="true"
  appendicon="$dropdown"
  backgroundcolor=""
  clearable="true"
  clearicon="$clear"
  errorcount="1"
  errormessages=""
  filter="function _default(item, queryText, itemText) {
        return itemText.toLocaleLowerCase().indexOf(queryText.toLocaleLowerCase()) > -1;
      }"
  hideselected="true"
  itemcolor="primary"
  itemdisabled="disabled"
  items=""
  itemtext="final_label"
  itemvalue="value"
  label="Test state"
  loaderheight="2"
  loading="true"
  menuprops="[object Object]"
  messages=""
  nodatatext="$vuetify.noDataText"
  returnobject="true"
  rules=""
  searchinput="sta"
  successmessages=""
  type="text"
  valuecomparator="function deepEqual(a, b) {
  if (a === b) return true;

  if (a instanceof Date && b instanceof Date) {
    // If the values are Date, they were convert to timestamp with getTime and compare it
    if (a.getTime() !== b.getTime()) return false;
  }

  if (a !== Object(a) || b !== Object(b)) {
    // If the values aren't objects, they were already checked for equality
    return false;
  }

  var props = Object.keys(a);

  if (props.length !== Object.keys(b).length) {
    // Different number of props, don't bother to check
    return false;
  }

  return props.every(function (p) {
    return deepEqual(a[p], b[p]);
  });
}"
/>
`;
